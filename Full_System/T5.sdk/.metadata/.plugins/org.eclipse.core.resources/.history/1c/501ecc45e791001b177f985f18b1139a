/******************************************************************************
*
* Copyright (C) 2009 - 2017 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

// self defined includes
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <stdlib.h>
#include "neuralnet.h"
#include "xuartlite.h"
#include "xil_types.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xaxidma.h"
#include "xaxidma_hw.h"
#include "sleep.h"
#include "netif/xadapter.h"
#include "xuartlite_i.h"
#include "platform.h"
#include "platform_config.h"
#if defined (__arm__) || defined(__aarch64__)
#include "xil_printf.h"
#endif
#include "xil_cache.h"

//LWIP include files
#include "lwip/ip_addr.h"
#include "lwip/tcp.h"
#include "lwip/err.h"
#include "lwip/tcp.h"
#include "lwip/inet.h"
#include "lwip/etharp.h"
#if LWIP_IPV6==1
#include "lwip/ip.h"
#else
#if LWIP_DHCP==1
#include "lwip/dhcp.h"
#endif
#endif

void lwip_init(); /* missing declaration in lwIP */
struct netif *echo_netif;

//TCP Network Params
#define SRC_MAC_ADDR {0x00, 0x0a, 0x35, 0x00, 0x00, 0x25}
#define SRC_IP4_ADDR "1.1.25.2"
#define IP4_NETMASK "255.255.0.0"
#define IP4_GATEWAY "1.1.0.1"
#define SRC_PORT 50001

#define DEST_IP4_ADDR  "1.1.27.2"
#define DEST_IP6_ADDR "fe80::6600:6aff:fe71:fde6"
#define DEST_PORT 7

#define TCP_SEND_BUFSIZE 100

#define UART_ADDR 0x40600000

#define send_buf_size 50

//Function prototypes
#if LWIP_IPV6==1
void print_ip6(char *msg, ip_addr_t *ip);
#else
void print_ip(char *msg, ip_addr_t *ip);
void print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw);
#endif
int setup_client_conn();
err_t tcp_send_data(void * arr, int arr_size);
void tcp_fasttmr(void);
void tcp_slowtmr(void);

//Function prototypes for callbacks
static err_t tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err);
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err);
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len);
static void tcp_client_err(void *arg, err_t err);
static void tcp_client_close(struct tcp_pcb *pcb);

//DHCP global variables
#if LWIP_IPV6==0
#if LWIP_DHCP==1
extern volatile int dhcp_timoutcntr;
err_t dhcp_start(struct netif *netif);
#endif
#endif

//Networking global variables
extern volatile int TcpFastTmrFlag;
extern volatile int TcpSlowTmrFlag;
static struct netif server_netif;
struct netif *app_netif;
static struct tcp_pcb *c_pcb;
char is_connected;

// user buffer
char user_buf[TCP_SEND_BUFSIZE];

int ack;

u32 checkHalted(u32 baseAddress,u32 offset);


// UART
#define UARTLITE_DEVICE_ID XPAR_AXI_UARTLITE_0_DEVICE_ID


int main()
{

	int accuracy_count = 0;
	float accuracy;
	u8 *test_labels, *test_images;
	u32 uart_status;
	u32 receivedBytes=0;
	u32 totalReceivedBytes=0;
	XUartLite_Config *myUartConfig;
	XUartLite myUart;

	u32 dma_status;
	u32 dma_recv_arr[10];
	u16 * test_images_fixed;

	test_labels = malloc(sizeof(u8)*(test_label_filesize));
	test_images = malloc(sizeof(u8)*(test_image_filesize));
	test_images_fixed = malloc(sizeof(u16)*(test_image_filesize));


	// init uart
	myUartConfig = XUartLite_LookupConfig(UARTLITE_DEVICE_ID);
	uart_status = XUartLite_CfgInitialize(&myUart, myUartConfig, XPAR_UARTLITE_0_BASEADDR);
	if(uart_status != XST_SUCCESS)
		xil_printf("\n\rUART Initialization Failed...\n\r");
	xil_printf("\n\rUART Initialization Passed...\n\r");


	// Receive Test Labels
	receivedBytes=0;
	totalReceivedBytes=0;
	xil_printf("Send Labels! \n\r");
	while(totalReceivedBytes < test_label_filesize){
		receivedBytes = XUartLite_Recv(&myUart, (u8*)&test_labels[totalReceivedBytes], 100);
		totalReceivedBytes += receivedBytes;
	}
	xil_printf("Total Test Label Received Bytes: %d \n\r", totalReceivedBytes);
	xil_printf("Labels Received! \n\r");


	// Receive Test Images
	receivedBytes=0;
	totalReceivedBytes=0;
	xil_printf("Send Images! \n\r");
	while(totalReceivedBytes < test_image_filesize){
		receivedBytes = XUartLite_Recv(&myUart, (u8*)&test_images[totalReceivedBytes], 100);
		totalReceivedBytes += receivedBytes;
		//xil_printf("Total Image Received Bytes: %d \n\r", totalReceivedBytes);
	}

	xil_printf("Total Test Image Received Bytes: %d \n\r", totalReceivedBytes);
	xil_printf("Images Received! \n\r");


	//Varibales for IP parameters
	#if LWIP_IPV6==0
		ip_addr_t ipaddr, netmask, gw;
	#endif

		//The mac address of the board. this should be unique per board
		unsigned char mac_ethernet_address[] = SRC_MAC_ADDR;

		//Network interface
		app_netif = &server_netif;

		//Initialize platform
		init_platform();

		//Defualt IP parameter values
	#if LWIP_IPV6==0
	#if LWIP_DHCP==1
	    ipaddr.addr = 0;
		gw.addr = 0;
		netmask.addr = 0;
	#else
		(void)inet_aton(SRC_IP4_ADDR, &ipaddr);
		(void)inet_aton(IP4_NETMASK, &netmask);
		(void)inet_aton(IP4_GATEWAY, &gw);
	#endif
	#endif

		//LWIP initialization
		lwip_init();

		//Setup Network interface and add to netif_list
	#if (LWIP_IPV6 == 0)
		if (!xemac_add(app_netif, &ipaddr, &netmask,
							&gw, mac_ethernet_address,
							PLATFORM_EMAC_BASEADDR)) {
			xil_printf("Error adding N/W interface\n\r");
			return -1;
		}
	#else
		if (!xemac_add(app_netif, NULL, NULL, NULL, mac_ethernet_address,
							PLATFORM_EMAC_BASEADDR)) {
			xil_printf("Error adding N/W interface\n\r");
			return -1;
		}
		app_netif->ip6_autoconfig_enabled = 1;

		netif_create_ip6_linklocal_address(app_netif, 1);
		netif_ip6_addr_set_state(app_netif, 0, IP6_ADDR_VALID);

	#endif
		netif_set_default(app_netif);

		//Now enable interrupts
		platform_enable_interrupts();

		//Specify that the network is up
		netif_set_up(app_netif);

	#if (LWIP_IPV6 == 0)
	#if (LWIP_DHCP==1)
		/* Create a new DHCP client for this interface.
		 * Note: you must call dhcp_fine_tmr() and dhcp_coarse_tmr() at
		 * the predefined regular intervals after starting the client.
		 */
		dhcp_start(app_netif);
		dhcp_timoutcntr = 24;

		while(((app_netif->ip_addr.addr) == 0) && (dhcp_timoutcntr > 0))
			xemacif_input(app_netif);

		if (dhcp_timoutcntr <= 0) {
			if ((app_netif->ip_addr.addr) == 0) {
				xil_printf("DHCP Timeout\n\r");
				xil_printf("Configuring default IP of %s\n\r", SRC_IP4_ADDR);
				(void)inet_aton(SRC_IP4_ADDR, &(app_netif->ip_addr));
				(void)inet_aton(IP4_NETMASK, &(app_netif->netmask));
				(void)inet_aton(IP4_GATEWAY, &(app_netif->gw));
			}
		}

		ipaddr.addr = app_netif->ip_addr.addr;
		gw.addr = app_netif->gw.addr;
		netmask.addr = app_netif->netmask.addr;
	#endif
	#endif

		//Print connection settings
	#if (LWIP_IPV6 == 0)
		print_ip_settings(&ipaddr, &netmask, &gw);
	#else
		print_ip6("Board IPv6 address ", &app_netif->ip6_addr[0].u_addr.ip6);
	#endif

		//Gratuitous ARP to announce MAC/IP address to network
		etharp_gratuitous(app_netif);

		//Setup connection
		setup_client_conn();

		//Event loop

		while (!is_connected) {
			//Call tcp_tmr functions
			//Must be called regularly
			if (TcpFastTmrFlag) {
				tcp_fasttmr();
				TcpFastTmrFlag = 0;
			}
			if (TcpSlowTmrFlag) {
				tcp_slowtmr();
				TcpSlowTmrFlag = 0;
			}

			//Process data queued after interupt
			xemacif_input(app_netif);
		}

		// Send Test Labels to 2nd FPGA
		xil_printf("Sending Test Labels! \n\r");
		if (num_of_test_images <= 100) {
			if(tcp_send_data(test_labels, num_of_test_images) != ERR_OK)
					{
						xil_printf("Send Test Labels Failed! \n\r");
					}
					ack = 0;
					while (!ack) {
						//Call tcp_tmr functions
						//Must be called regularly
						if (TcpFastTmrFlag) {
							tcp_fasttmr();
							TcpFastTmrFlag = 0;
						}
						if (TcpSlowTmrFlag) {
							tcp_slowtmr();
							TcpSlowTmrFlag = 0;
						}

						//Process data queued after interrupt
						xemacif_input(app_netif);
					}
		}
		else
		{
			for (int i=0; i < num_of_test_images/100; i++) {
				if(tcp_send_data(&test_labels[i*100], 100) != ERR_OK)
				{
					xil_printf("Send Test Labels Failed! \n\r");
				}
				ack = 0;
				while (!ack) {
					//print("test\n\r");
					//Call tcp_tmr functions
					//Must be called regularly
					if (TcpFastTmrFlag) {
						tcp_fasttmr();
						TcpFastTmrFlag = 0;
					}
					if (TcpSlowTmrFlag) {
						tcp_slowtmr();
						TcpSlowTmrFlag = 0;
					}

					//Process data queued after interupt
					xemacif_input(app_netif);
				}
			}
		}


	// Init DMA
	XAxiDma_Config *myDMAConfig;
	XAxiDma myDMA;

	myDMAConfig = XAxiDma_LookupConfigBaseAddr(XPAR_AXI_DMA_0_BASEADDR);
	dma_status = XAxiDma_CfgInitialize(&myDMA, myDMAConfig);
	if(dma_status != XST_SUCCESS){
		print("DMA Initialization Failed\n\r");
		return -1;
	}
	print("DMA Initialization Success...\n\r");

	u16 tmp;
	float tmp_out;
	float max;
	u8 digit;
	int send_cnt = 0;
	u8 send_buf[send_buf_size];
	for (int i=0; i<num_of_test_images;i++){

		// convert the byte test image to fix point test image
		print("\n\rConverting u8 to Fixed-Point Notation\n\r");
		for(int j=0; j<image_size; ++j)
		{
			tmp = float_to_fixed(test_images[i*image_size + j]/255.0);
			test_images_fixed[i*image_size + j] = tmp;
			//xil_printf("Iteration:  %d Value: %d\n\r", i, (int)tmp);
		}
		print("Conversion Done\n\r");

		// Send test images to the dma
		dma_status = checkHalted(XPAR_AXI_DMA_0_BASEADDR,0x4);
		Xil_DCacheFlushRange((u32)test_images_fixed,image_size*sizeof(u16));
		dma_status = XAxiDma_SimpleTransfer(&myDMA, (u32)&dma_recv_arr[0], 10*sizeof(u32), XAXIDMA_DEVICE_TO_DMA);
		dma_status = XAxiDma_SimpleTransfer(&myDMA, (UINTPTR)&test_images_fixed[image_size*i], image_size*sizeof(u16), XAXIDMA_DMA_TO_DEVICE);
		if(dma_status != XST_SUCCESS)
		{
			print("DMA Transmit Failed\n\r");
			return -1;
		}
		xil_printf("DMA Transmit Successful, Test Image %d Sent\n\r", i+1);

		max = 0;
		digit = 0;

		// get the output result for the current test image
		for (int j=0; j<10; j++)
		{
			xil_printf("Neural Network Digit Weights: %d  %d\n\r", (u16)dma_recv_arr[j],j);
			tmp_out = fixed_to_float((u16)dma_recv_arr[j]);
			if (tmp_out > max)
			{
				max = tmp_out;
				digit = j;
			}

		}
		send_buf[send_cnt] = digit;
		send_cnt ++;

		if (send_cnt == send_buf_size)
		{
			send_cnt = 0;
			tcp_send_data(send_buf, send_buf_size);
			ack = 0;
			while (!ack) {
				//Call tcp_tmr functions
				//Must be called regularly
				if (TcpFastTmrFlag) {
					tcp_fasttmr();
					TcpFastTmrFlag = 0;
				}
				if (TcpSlowTmrFlag) {
					tcp_slowtmr();
					TcpSlowTmrFlag = 0;
				}

				//Process data queued after interupt
				xemacif_input(app_netif);
			}
		}


		if ((int)digit == (int)test_labels[i]) accuracy_count++;
		accuracy = (accuracy_count * 100)/(i+1);
        xil_printf("Accuracy Count: %d	Accuracy: %d \n\r", accuracy_count, (int)accuracy);
		xil_printf("Neural Network Output: %d	Label: %d \n\r", (int)digit, (int)test_labels[i]);
	}

	return 0;
}





u32 checkHalted(u32 baseAddress,u32 offset){
	u32 status;
	status = (XAxiDma_ReadReg(baseAddress,offset))&XAXIDMA_HALTED_MASK;
	return status;
}

#if LWIP_IPV6==1
void print_ip6(char *msg, ip_addr_t *ip)
{
	print(msg);
	xil_printf(" %x:%x:%x:%x:%x:%x:%x:%x\n\r",
			IP6_ADDR_BLOCK1(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK2(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK3(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK4(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK5(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK6(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK7(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK8(&ip->u_addr.ip6));

}
#else
void print_ip(char *msg, ip_addr_t *ip)
{
	print(msg);
	xil_printf("%d.%d.%d.%d\n\r", ip4_addr1(ip), ip4_addr2(ip),
			ip4_addr3(ip), ip4_addr4(ip));
}

void print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw)
{

	print_ip("Board IP: ", ip);
	print_ip("Netmask : ", mask);
	print_ip("Gateway : ", gw);
}
#endif

err_t tcp_send_data(void * arr, int arr_size)
{
	err_t err;
	//Just send a single packet
	u8_t apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
	//Loop until enough room in buffer (should be right away)
	while (tcp_sndbuf(c_pcb) < TCP_SEND_BUFSIZE);
	//Enqueue some data to send
	err = tcp_write(c_pcb, arr, arr_size, apiflags);
	if (err != ERR_OK) {
		xil_printf("TCP client: Error on tcp_write: %d\n\r", err);
		return err;
	}

	//send the data packet
	err = tcp_output(c_pcb);
	if (err != ERR_OK) {
		xil_printf("TCP client: Error on tcp_output: %d\n\r",err);
		return err;
	}

	xil_printf("Packet data sent\n\r");

	//END OF ADDED CODE

	return ERR_OK;
}

int setup_client_conn()
{
	struct tcp_pcb *pcb;
	err_t err;
	ip_addr_t remote_addr;

	xil_printf("Setting up client connection\n\r");

#if LWIP_IPV6==1
	remote_addr.type = IPADDR_TYPE_V6;
	err = inet6_aton(DEST_IP6_ADDR, &remote_addr);
#else
	err = inet_aton(DEST_IP4_ADDR, &remote_addr);
#endif

	if (!err) {
		xil_printf("Invalid Server IP address: %d\n\r", err);
		return -1;
	}

	//Create new TCP PCB structure
	pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
	if (!pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	}

	//Bind to specified @port
	err = tcp_bind(pcb, IP_ANY_TYPE, SRC_PORT);
	if (err != ERR_OK) {
		xil_printf("Unable to bind to port %d: err = %d\n\r", SRC_PORT, err);
		return -2;
	}

	//Connect to remote server (with callback on connection established)
	err = tcp_connect(pcb, &remote_addr, DEST_PORT, tcp_client_connected);
	if (err) {
		xil_printf("Error on tcp_connect: %d\n\r", err);
		tcp_client_close(pcb);
		return -1;
	}

	is_connected = 0;

	xil_printf("Waiting for server to accept connection\n\r");

	return 0;
}

static void tcp_client_close(struct tcp_pcb *pcb)
{
	err_t err;

	xil_printf("Closing Client Connection\n\r");

	if (pcb != NULL) {
		tcp_sent(pcb, NULL);
		tcp_recv(pcb,NULL);
		tcp_err(pcb, NULL);
		err = tcp_close(pcb);
		if (err != ERR_OK) {
			/* Free memory with abort */
			tcp_abort(pcb);
		}
	}
}

static err_t tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
	if (err != ERR_OK) {
		tcp_client_close(tpcb);
		xil_printf("Connection error\n\r");
		return err;
	}

	xil_printf("Connection to server established\n\r");

	//Store state (for callbacks)
	c_pcb = tpcb;
	is_connected = 1;

	//Set callback values & functions
	tcp_arg(c_pcb, NULL);
	tcp_recv(c_pcb, tcp_client_recv);
	tcp_sent(c_pcb, tcp_client_sent);
	tcp_err(c_pcb, tcp_client_err);



	return ERR_OK;
}

static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
	//If no data, connection closed
	if (!p) {
		xil_printf("No data received\n\r");
		tcp_client_close(tpcb);
		return ERR_OK;
	}

	//Print message
	xil_printf("Packet received, %d bytes\n\r", p->tot_len);


	//Indicate done processing
	tcp_recved(tpcb, p->tot_len);

	//Free the received pbuf
	pbuf_free(p);

	return 0;
}

static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{

	//Print message
	xil_printf("Packet sent successfully, %d bytes\n\r", len);
	ack = 1;
	//END OF ADDED CODE

	return 0;
}

static void tcp_client_err(void *arg, err_t err)
{
	LWIP_UNUSED_ARG(err);
	tcp_client_close(c_pcb);
	c_pcb = NULL;
	xil_printf("TCP connection aborted\n\r");
}

