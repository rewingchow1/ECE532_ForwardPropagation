# -*- coding: utf-8 -*-
"""pyserial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R92Q9sc5giE1BFURHFOp6JJhhE20cWzI
"""


import serial
import matplotlib.pyplot as plt
import numpy as np
import time


ser = serial.Serial("COM5", 9600, timeout=0)
print("listening at COM5")

labels = []
nn_outputs = []
correct = []
received_data_cnt = 0

digit0_output = []
digit1_output = []
digit2_output = []
digit3_output = []
digit4_output = []
digit5_output = []
digit6_output = []
digit7_output = []
digit8_output = []
digit9_output = []

digit0_correct = []
digit1_correct = []
digit2_correct = []
digit3_correct = []
digit4_correct = []
digit5_correct = []
digit6_correct = []
digit7_correct = []
digit8_correct = []
digit9_correct = []

fig = plt.figure()

ax1 = plt.subplot2grid((4,3),(0,0))
ax2 = plt.subplot2grid((4,3),(0,2))
ax3 = plt.subplot2grid((4,3),(1,0))
ax4 = plt.subplot2grid((4,3),(1,1))
ax5 = plt.subplot2grid((4,3),(1,2))
ax6 = plt.subplot2grid((4,3),(2,0))
ax7 = plt.subplot2grid((4,3),(2,1))
ax8 = plt.subplot2grid((4,3),(2,2))
ax9 = plt.subplot2grid((4,3),(3,0))
ax10 = plt.subplot2grid((4,3),(3,1))
ax11 = plt.subplot2grid((4,3),(3,2))

fig.tight_layout()

ax1.set_title("Overall Accuracy")
ax2.set_title("Digit 0 Accuracy")
ax3.set_title("Digit 1 Accuracy")
ax4.set_title("Digit 2 Accuracy")
ax5.set_title("Digit 3 Accuracy")
ax6.set_title("Digit 4 Accuracy")
ax7.set_title("Digit 5 Accuracy")
ax8.set_title("Digit 6 Accuracy")
ax9.set_title("Digit 7 Accuracy")
ax10.set_title("Digit 8 Accuracy")
ax11.set_title("Digit 9 Accuracy")

while (True):
    
    data = ser.read(1) # read 3 bytes

    if data == b'\x82':
        print("receving data!")
        data = ser.read(1)
        while len(data) == 0:
            data = ser.read(1)
        labels.append(ord(data))
        
        data = ser.read(1)
        while len(data) == 0:
            data = ser.read(1)
        nn_outputs.append(ord(data))
        
        data = ser.read(1)
        while len(data) == 0:
            data = ser.read(1)
        correct.append(ord(data))

        
        
        #print(labels)
        #print(nn_outputs)
        #print(correct)

        overall_accu = np.sum(correct) / (received_data_cnt+1)
        print("received data: ", received_data_cnt+1, "accuracy: %.3f" % (overall_accu*100),"%")
        print("\n")
##        for i in range(len(labels)):
        if labels[received_data_cnt] == 0:
            digit0_output.append(nn_outputs[received_data_cnt])
            digit0_correct.append(correct[received_data_cnt])
        if labels[received_data_cnt] == 1:
            digit1_output.append(nn_outputs[received_data_cnt])
            digit1_correct.append(correct[received_data_cnt])
        if labels[received_data_cnt] == 2:
            digit2_output.append(nn_outputs[received_data_cnt])
            digit2_correct.append(correct[received_data_cnt])
        if labels[received_data_cnt] == 3:
            digit3_output.append(nn_outputs[received_data_cnt])
            digit3_correct.append(correct[received_data_cnt])
        if labels[received_data_cnt] == 4:
            digit4_output.append(nn_outputs[received_data_cnt])
            digit4_correct.append(correct[received_data_cnt])
        if labels[received_data_cnt] == 5:
            #3print("receiving digit 5")
            #print(labels[received_data_cnt])
            digit5_output.append(nn_outputs[received_data_cnt])
            digit5_correct.append(correct[received_data_cnt])
        if labels[received_data_cnt] == 6:
            digit6_output.append(nn_outputs[received_data_cnt])
            digit6_correct.append(correct[received_data_cnt])
        if labels[received_data_cnt] == 7:
            digit7_output.append(nn_outputs[received_data_cnt])
            digit7_correct.append(correct[received_data_cnt])
        if labels[received_data_cnt] == 8:
            digit8_output.append(nn_outputs[received_data_cnt])
            digit8_correct.append(correct[received_data_cnt])
        if labels[received_data_cnt] == 9:
            digit9_output.append(nn_outputs[received_data_cnt])
            digit9_correct.append(correct[received_data_cnt])

        received_data_cnt += 1

##        ax1.set_title("Overall Accuracy", overall_accu)
        
                
        ax1.scatter(received_data_cnt, np.sum(correct) / received_data_cnt, color = 'blue')
        if len(digit0_output) != 0:
##            ax2.set_title("Digit 0 Accuracy", np.sum(digit0_correct) / len(digit0_output))
            ax2.scatter(len(digit0_output), np.sum(digit0_correct) / len(digit0_output), color = 'green')
        if len(digit1_output) != 0:
##            ax3.set_title("Digit 1 Accuracy", np.sum(digit1_correct) / len(digit1_output))
            ax3.scatter(len(digit1_output), np.sum(digit1_correct) / len(digit1_output), color = 'green')
        if len(digit2_output) != 0:
##            ax4.set_title("Digit 2 Accuracy", np.sum(digit2_correct) / len(digit2_output))
            ax4.scatter(len(digit2_output), np.sum(digit2_correct) / len(digit2_output), color = 'green')
        if len(digit3_output) != 0:
##            ax5.set_title("Digit 3 Accuracy", np.sum(digit3_correct) / len(digit3_output))
            ax5.scatter(len(digit3_output), np.sum(digit3_correct) / len(digit3_output), color = 'green')
        if len(digit4_output) != 0:
##            ax6.set_title("Digit 4 Accuracy", np.sum(digit4_correct) / len(digit4_output))
            ax6.scatter(len(digit4_output), np.sum(digit4_correct) / len(digit4_output), color = 'green')
        if len(digit5_output) != 0:
##            ax7.set_title("Digit 5 Accuracy", np.sum(digit5_correct) / len(digit5_output))
            ax7.scatter(len(digit5_output), np.sum(digit5_correct) / len(digit5_output), color = 'green')
        if len(digit6_output) != 0:
##            ax8.set_title("Digit 6 Accuracy", np.sum(digit6_correct) / len(digit6_output))
            ax8.scatter(len(digit6_output), np.sum(digit6_correct) / len(digit6_output), color = 'green')
        if len(digit7_output) != 0:
##            ax9.set_title("Digit 7 Accuracy", np.sum(digit7_correct) / len(digit7_output))
            ax9.scatter(len(digit7_output), np.sum(digit7_correct) / len(digit7_output), color = 'green')
        if len(digit8_output) != 0:
##            ax10.set_title("Digit 8 Accuracy", np.sum(digit8_correct) / len(digit8_output))
            ax10.scatter(len(digit8_output), np.sum(digit8_correct) / len(digit8_output), color = 'green')
        if len(digit9_output) != 0:
##            ax11.set_title("Digit 9 Accuracy", np.sum(digit9_correct) / len(digit9_output))
            ax11.scatter(len(digit9_output), np.sum(digit9_correct) / len(digit9_output), color = 'green')
        
        
        
        plt.pause(0.001)

plt.show()
