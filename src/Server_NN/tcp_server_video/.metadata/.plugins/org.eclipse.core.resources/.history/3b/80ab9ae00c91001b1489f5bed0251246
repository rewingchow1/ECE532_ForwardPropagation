/*
 * Copyright (C) 2009 - 2018 Xilinx, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 */

#include <stdio.h>

#include "xparameters.h"

#include "netif/xadapter.h"

#include "includes.h"

#include "platform.h"
#include "platform_config.h"
#if defined (__arm__) || defined(__aarch64__)
#include "xil_printf.h"
#endif

#include "lwip/tcp.h"
#include "xil_cache.h"

#if LWIP_IPV6==1
#include "lwip/ip.h"
#else
#if LWIP_DHCP==1
#include "lwip/dhcp.h"
#endif
#endif

#include "xuartlite.h"
#include "xil_types.h"

/* defined by each RAW mode application */
void print_app_header();
int start_application();
int transfer_data();
void tcp_fasttmr(void);
void tcp_slowtmr(void);

/* missing declaration in lwIP */
void lwip_init();

#if LWIP_IPV6==0
#if LWIP_DHCP==1
extern volatile int dhcp_timoutcntr;
err_t dhcp_start(struct netif *netif);
#endif
#endif

extern volatile int TcpFastTmrFlag;
extern volatile int TcpSlowTmrFlag;
static struct netif server_netif;
struct netif *echo_netif;

#if LWIP_IPV6==1
void print_ip6(char *msg, ip_addr_t *ip)
{
	print(msg);
	xil_printf(" %x:%x:%x:%x:%x:%x:%x:%x\n\r",
			IP6_ADDR_BLOCK1(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK2(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK3(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK4(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK5(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK6(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK7(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK8(&ip->u_addr.ip6));

}
#else
void
print_ip(char *msg, ip_addr_t *ip)
{
	print(msg);
	xil_printf("%d.%d.%d.%d\n\r", ip4_addr1(ip), ip4_addr2(ip),
			ip4_addr3(ip), ip4_addr4(ip));
}

void
print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw)
{

	print_ip("Board IP: ", ip);
	print_ip("Netmask : ", mask);
	print_ip("Gateway : ", gw);
}
#endif

#if defined (__arm__) && !defined (ARMR5)
#if XPAR_GIGE_PCS_PMA_SGMII_CORE_PRESENT == 1 || XPAR_GIGE_PCS_PMA_1000BASEX_CORE_PRESENT == 1
int ProgramSi5324(void);
int ProgramSfpPhy(void);
#endif
#endif

#ifdef XPS_BOARD_ZCU102
#ifdef XPAR_XIICPS_0_DEVICE_ID
int IicPhyReset(void);
#endif
#endif

#define ADDR 25
#define MAC_ADDR { 0x00, 0x0a, 0x35, 0x00, 0x00, 0x25 }

float fixed_to_float(u16 input);
u16 float_to_fixed(float input);
void calc_stats(int nn_output_cnt, u8* test_labels, u16* nn_outputs, u8* out_correct, u8 * out_digit, u8 * out_label);


#define test_label_filesize 100
#define UARTLITE_DEVICE_ID XPAR_AXI_UARTLITE_0_DEVICE_ID

// 2 bytes to fixed point conversion
union ByteFixed {
    u16 f;
    u8 b[2];
};

int main()
{
	// uart initialzatoin
	// buffers
	 u8* test_labels = malloc(sizeof(u8)*(test_label_filesize));
	 u16* nn_outputs = malloc(sizeof(u16)*(test_label_filesize)*10);

	 u32 status;
	 XUartLite_Config *myUartConfig;
	 XUartLite myUart;

	 // init uart
	 myUartConfig = XUartLite_LookupConfig(UARTLITE_DEVICE_ID);
	 status = XUartLite_CfgInitialize(&myUart, myUartConfig, XPAR_UARTLITE_0_BASEADDR);
	 if(status != XST_SUCCESS)
	  xil_printf("\n\rUART Initialization Failed...\n\r");
	 xil_printf("\n\rUART Initialization Passed...\n\r");

#if LWIP_IPV6==0
	ip_addr_t ipaddr, netmask, gw;

#endif
	/* the mac address of the board. this should be unique per board */
	unsigned char mac_ethernet_address[] = MAC_ADDR;

	echo_netif = &server_netif;
#if defined (__arm__) && !defined (ARMR5)
#if XPAR_GIGE_PCS_PMA_SGMII_CORE_PRESENT == 1 || XPAR_GIGE_PCS_PMA_1000BASEX_CORE_PRESENT == 1
	ProgramSi5324();
	ProgramSfpPhy();
#endif
#endif

/* Define this board specific macro in order perform PHY reset on ZCU102 */
#ifdef XPS_BOARD_ZCU102
	if(IicPhyReset()) {
		xil_printf("Error performing PHY reset \n\r");
		return -1;
	}
#endif

	init_platform();

#if LWIP_IPV6==0
#if LWIP_DHCP==1
    ipaddr.addr = 0;
	gw.addr = 0;
	netmask.addr = 0;
#else
	/* initliaze IP addresses to be used */
	IP4_ADDR(&ipaddr,  1, 1,   ADDR, 2);
	IP4_ADDR(&netmask, 255, 255, 0,  0);
	IP4_ADDR(&gw,      1, 1,   0,  1);
#endif
#endif
	print_app_header();

	lwip_init();

#if (LWIP_IPV6 == 0)
	/* Add network interface to the netif_list, and set it as default */
	if (!xemac_add(echo_netif, &ipaddr, &netmask,
						&gw, mac_ethernet_address,
						PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\n\r");
		return -1;
	}
#else
	/* Add network interface to the netif_list, and set it as default */
	if (!xemac_add(echo_netif, NULL, NULL, NULL, mac_ethernet_address,
						PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\n\r");
		return -1;
	}
	echo_netif->ip6_autoconfig_enabled = 1;

	netif_create_ip6_linklocal_address(echo_netif, 1);
	netif_ip6_addr_set_state(echo_netif, 0, IP6_ADDR_VALID);

	print_ip6("\n\rBoard IPv6 address ", &echo_netif->ip6_addr[0].u_addr.ip6);

#endif
	netif_set_default(echo_netif);

	/* now enable interrupts */
	platform_enable_interrupts();

	/* specify that the network if is up */
	netif_set_up(echo_netif);

#if (LWIP_IPV6 == 0)
#if (LWIP_DHCP==1)
	/* Create a new DHCP client for this interface.
	 * Note: you must call dhcp_fine_tmr() and dhcp_coarse_tmr() at
	 * the predefined regular intervals after starting the client.
	 */
	dhcp_start(echo_netif);
	dhcp_timoutcntr = 5;

	while(((echo_netif->ip_addr.addr) == 0) && (dhcp_timoutcntr > 0))
		xemacif_input(echo_netif);

	if (dhcp_timoutcntr <= 0) {
		if ((echo_netif->ip_addr.addr) == 0) {
			xil_printf("DHCP Timeout\r\n");
			IP4_ADDR(&(echo_netif->ip_addr),  1, 1,   ADDR, 2);
			IP4_ADDR(&(echo_netif->netmask), 255, 255, 0,  0);
			IP4_ADDR(&(echo_netif->gw),      1, 1,   0,  1);
		}
	}

	ipaddr.addr = echo_netif->ip_addr.addr;
	gw.addr = echo_netif->gw.addr;
	netmask.addr = echo_netif->netmask.addr;
#endif

	print_ip_settings(&ipaddr, &netmask, &gw);

#endif
	/* start the application (web server, rxtest, txtest, etc..) */
	start_application();
	xil_printf("Now Receiving\n");
	/* receive and process packets */

	//Event loop
	int i = 0, j = 0, test_label_cnt = 0, nn_output_cnt = 0;
	union ByteFixed tmp;
	// ouput to PC
	u8 correct, nn_out_digit, label_digit;
	// number of bytes sent to PC
	int SentBytes = 0, totalSentBytes = 0;
	// buffer PC
	u8 send_buf[3];
	int state = 0;
	// indicate the data is sending now
	u8 data_indicator =130;

	while (1) {
		if (TcpFastTmrFlag) {
			tcp_fasttmr();
			TcpFastTmrFlag = 0;
		}
		if (TcpSlowTmrFlag) {
			tcp_slowtmr();
			TcpSlowTmrFlag = 0;
		}
		xemacif_input(echo_netif);
		transfer_data();
		if (recv_done)
		{
			recv_done = 0;
			switch(state)
		   {
		   case 0: // test labels

			print("test labels received\n\r");

			for (i=0; i < test_label_filesize; ++i)
			{
			 test_labels[test_label_cnt] = in_buf[i];
			 in_buf[i] = '\0';
			 //xil_printf("%d\n\r", test_labels[test_label_cnt]);
			 ++test_label_cnt;

			}

			if (i == test_label_filesize)
			{
			 xil_printf("total received test labels %d\n\r", test_label_cnt);
			 state = 1;
			}

			break;

		   case 1: //nn outputs
			   j=0;
			xil_printf("receiving nn output %d\n\r", nn_output_cnt+1);
			for (i=0; i<20; i+=2)
			{
			 tmp.b[0] = in_buf[i];
			 tmp.b[1] = in_buf[i+1];

			 //xil_printf("%d %d ", in_buf[i], in_buf[i+1]);

			 nn_outputs[nn_output_cnt*10+j] = tmp.f;
			 xil_printf("%d ",nn_outputs[nn_output_cnt*10+j] );
			 in_buf[i] = '\0';
			 in_buf[i+1] = '\0';
			 ++j;
			}
			printf("\n");

			calc_stats(nn_output_cnt, test_labels, nn_outputs, &correct, &nn_out_digit, &label_digit);
			++nn_output_cnt;

			if (nn_output_cnt == test_label_filesize)
			{
			 xil_printf("total received nn output %d", nn_output_cnt);
			 state = 2;
			}

			// send data through uart
			print("Send testing result to PC! \n\r");
			send_buf[0] = label_digit;
			send_buf[1] = nn_out_digit;
			send_buf[2] = correct;
			xil_printf("%d %d %d\n", label_digit,nn_out_digit, correct);

			//XUartLite_Send(&myUart, (u8*)data_indicator, sizeof(data_indicator));
			xil_printf("%c", data_indicator);
			totalSentBytes = 0;
			while(totalSentBytes < sizeof(send_buf)){
			 SentBytes = XUartLite_Send(&myUart, (u8*)&send_buf[totalSentBytes], sizeof(u8));
			 totalSentBytes += SentBytes;
			}
			print("data sent! \n\r");

			break;

		   default:
			break;
		   }
		}
	}

	/* never reached */
	cleanup_platform();

	return 0;
}

void calc_stats(int nn_output_cnt, u8* test_labels, u16* nn_outputs, u8* out_correct, u8 * out_digit, u8 * out_label)
{
 int correct = 0;

 float max = 0;
 u16 tmp;
 int digit = 0;
 // get the output result for the current test image
 for (int i=0; i<10; i++)
 {
  tmp = nn_outputs[nn_output_cnt*10+i];
  xil_printf("%d \n", nn_outputs[nn_output_cnt*10+i]);
  if (tmp > max)
  {
   max = tmp;
   digit = i;
  }

 }
 // check if the results are the same as expected result
 if ((int)test_labels[nn_output_cnt] == digit)
 {
  correct = 1;
 }

 xil_printf("test image %d, expected %d, received %d\n\r", nn_output_cnt+1, (int)test_labels[nn_output_cnt], digit);

 *out_digit = (u8)digit;
 *out_correct = (u8)correct;
 *out_label = test_labels[nn_output_cnt];
}

/// Converts 4.12 format to unsigned 8-bit integer
float fixed_to_float(u16 input)
{
 float sign = 1.0;
 float output;
 float tmp;
 u32 in = (u32)input;
 // if negative, 2's comp
 if (input & 0x8000)
 {
  input = ~(input - 1);
  sign = -1.0;
 }
xil_printf("to be converted: %d ", input);
 tmp = *(float*)&in;
 output = sign * (tmp /4096.0);

xil_printf("after conversion %d\n", output*100);
 return output;
}

/// Converts unsigned 8-bit integer to 4.12 format
u16 float_to_fixed(float input)
{
 u16 output;
 output = (u16)(input * 4096.0);

 return output;
}
